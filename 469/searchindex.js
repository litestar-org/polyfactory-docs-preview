Search.setIndex({"docnames": ["contributing", "index", "reference/constants", "reference/decorators", "reference/exceptions", "reference/factories/attrs_factory", "reference/factories/base", "reference/factories/beanie_odm_factory", "reference/factories/dataclass_factory", "reference/factories/index", "reference/factories/msgspec_factory", "reference/factories/odmantic_odm_factory", "reference/factories/pydantic_factory", "reference/factories/sqlalchemy_factory", "reference/factories/typed_dict_factory", "reference/field_meta", "reference/fields", "reference/index", "reference/persistence", "reference/pytest_plugin", "reference/value_generators/complex_types", "reference/value_generators/constrained_collections", "reference/value_generators/constrained_dates", "reference/value_generators/constrained_numbers", "reference/value_generators/constrained_strings", "reference/value_generators/index", "reference/value_generators/primitives", "usage/configuration", "usage/declaring_factories", "usage/decorators", "usage/fields", "usage/fixtures", "usage/handling_custom_types", "usage/index", "usage/library_factories/index", "usage/library_factories/sqlalchemy_factory", "usage/model_coverage"], "filenames": ["contributing.rst", "index.rst", "reference/constants.rst", "reference/decorators.rst", "reference/exceptions.rst", "reference/factories/attrs_factory.rst", "reference/factories/base.rst", "reference/factories/beanie_odm_factory.rst", "reference/factories/dataclass_factory.rst", "reference/factories/index.rst", "reference/factories/msgspec_factory.rst", "reference/factories/odmantic_odm_factory.rst", "reference/factories/pydantic_factory.rst", "reference/factories/sqlalchemy_factory.rst", "reference/factories/typed_dict_factory.rst", "reference/field_meta.rst", "reference/fields.rst", "reference/index.rst", "reference/persistence.rst", "reference/pytest_plugin.rst", "reference/value_generators/complex_types.rst", "reference/value_generators/constrained_collections.rst", "reference/value_generators/constrained_dates.rst", "reference/value_generators/constrained_numbers.rst", "reference/value_generators/constrained_strings.rst", "reference/value_generators/index.rst", "reference/value_generators/primitives.rst", "usage/configuration.rst", "usage/declaring_factories.rst", "usage/decorators.rst", "usage/fields.rst", "usage/fixtures.rst", "usage/handling_custom_types.rst", "usage/index.rst", "usage/library_factories/index.rst", "usage/library_factories/sqlalchemy_factory.rst", "usage/model_coverage.rst"], "titles": ["Contributing", "Polyfactory", "constants", "decorators", "exceptions", "attrs_factory", "base_factory", "beanie_odm_factory", "dataclass_factory", "factories", "msgspec_factory", "odmantic_odm_factory", "pydantic_factory", "sqlalchemy_factory", "typed_dict_factory", "field_meta", "fields", "API Reference", "persistence", "pytest_plugin", "complex_types", "constrained_collections", "constrained_dates", "constrained_numbers", "constrained_strings", "value_generators", "primitives", "Factory Configuration", "Declaring Factories", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">post_generated</span></code> decorator", "Factory Fields", "Pytest fixtures", "Handling Custom Types", "Usage Guide", "Polyfactory Factories", "SQLAlchemyFactory", "Model coverage generation"], "terms": {"instal": [0, 4, 35], "pizza": 0, "deliveri": 0, "man": 0, "pdm": 0, "g": [0, 30, 34], "all": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 27, 29, 30, 34, 36], "virtual": 0, "depend": [0, 4, 23, 29, 34], "If": [0, 6, 12, 27], "you": [0, 27, 28, 30, 31, 32, 36], "re": [0, 30, 36], "work": [0, 1, 32], "need": [0, 5, 27, 28, 30, 32], "build": [0, 1, 4, 6, 7, 12, 16, 27, 28, 29, 30, 31, 32, 35], "extra": 0, "pre": 0, "commit": [0, 35], "hook": 0, "fork": 0, "polyfactori": [0, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36], "repositori": 0, "clone": 0, "your": [0, 32], "git": 0, "make": [0, 30, 34], "chang": [0, 1], "option": [0, 6, 16, 19, 23, 31, 34, 36], "file": 0, "linter": 0, "formatt": 0, "thi": [0, 1, 2, 5, 6, 10, 11, 12, 13, 15, 16, 27, 28, 29, 30, 31, 32, 34, 35, 36], "step": 0, "i": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 23, 27, 28, 29, 30, 31, 32, 35, 36], "execut": 0, "automat": [0, 5, 6, 35], "befor": [0, 36], "mai": 0, "want": [0, 1], "manual": 0, "order": 0, "appli": [0, 28], "fix": 0, "push": 0, "open": 0, "pull": 0, "request": 0, "give": [0, 30], "descript": 0, "titl": 0, "indic": 0, "what": [0, 6, 32], "ha": [0, 27, 30, 36], "correspond": 0, "issu": 0, "For": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 27, 28, 29, 30, 36], "exampl": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 24, 27, 28, 29, 30, 31, 32, 35, 36], "bug": 0, "increas": 0, "stack": 0, "size": [0, 6, 16, 27, 30, 31], "imposs": 0, "find": 0, "needl": 0, "could": [0, 30], "easier": 0, "fire": 0, "haystack": 0, "follow": 0, "convent": 0, "format": 0, "The": [0, 1, 5, 6, 12, 13, 16, 18, 23, 28, 32, 33, 34, 35, 36], "locat": 0, "directori": 0, "built": [0, 20, 28], "rest": 0, "sphinx": 0, "unfamiliar": 0, "ani": [0, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 27, 28, 30, 32, 34], "those": 0, "restructuredtext": 0, "primer": 0, "quickstart": 0, "ar": [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 23, 27, 28, 30, 31, 34, 35, 36], "recommend": 0, "read": [0, 27], "we": [0, 1, 7, 27, 30, 31, 32, 34], "welcom": 0, "enhanc": 0, "improv": 0, "usabl": 0, "us": [0, 1, 2, 4, 6, 7, 12, 15, 16, 19, 23, 27, 28, 29, 31, 32, 35, 36], "custom": [0, 1, 12, 23, 28, 30, 33], "inherit": 0, "pydata": 0, "which": [0, 1, 28, 30, 32], "come": [0, 28], "lot": 0, "out": 0, "box": 0, "wish": 0, "style": 0, "setup": 0, "static": 0, "site": 0, "gener": [0, 1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 35], "should": [0, 6, 12, 21, 27, 30], "consult": 0, "first": [0, 27, 36], "To": [0, 27, 31, 32], "requir": [0, 1, 4, 5, 6, 16, 27, 34, 35], "Then": 0, "can": [0, 1, 5, 6, 20, 21, 23, 27, 28, 30, 31, 32, 35, 36], "serv": 0, "them": 0, "content": [0, 36], "feel": 0, "free": 0, "add": [0, 23, 27, 32, 35], "clarifi": 0, "text": 0, "restructur": 0, "etc": [0, 27], "sure": [0, 34], "guidelin": 0, "idiomat": 0, "english": 0, "simpl": [0, 1, 30], "languag": 0, "keep": 0, "self": [0, 15, 19, 27, 32], "contain": [0, 15, 20, 36], "provid": [0, 4, 6, 30, 32, 35, 36], "link": 0, "where": [0, 13, 30, 36], "applic": 0, "intersphinx": 0, "wherev": 0, "possibl": [0, 1, 30], "when": [0, 4, 6, 12, 27, 29, 30, 32, 36], "referenc": 0, "extern": 0, "librari": [0, 1, 6, 27, 28, 30, 32, 34], "diagram": 0, "mermaidj": 0, "increment": [0, 23], "version": [0, 1, 28], "pyproject": 0, "toml": 0, "semant": [0, 30], "pep": 0, "440": 0, "In": [0, 27, 28, 30, 31, 32, 35, 36], "github": 0, "go": 0, "tab": 0, "pick": 0, "draft": 0, "tag": 0, "both": [0, 27, 35], "vx": 0, "x": 0, "fill": 0, "let": [0, 30], "do": [0, 27, 30, 32, 34], "publish": 0, "action": 0, "approv": 0, "check": [0, 6], "successfulli": 0, "power": 1, "mock": [1, 6, 7, 27, 30, 32], "data": [1, 6, 7, 13, 15, 18, 27, 30], "base": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 23, 28, 30, 34, 35], "around": 1, "type": [1, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35], "hint": 1, "support": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 27, 28, 31, 35], "dataclass": [1, 8, 27, 28, 29, 30, 31, 32, 34, 36], "dict": [1, 6, 10, 11, 12, 13, 16, 27, 28, 30, 32, 34], "model": [1, 5, 6, 8, 10, 11, 12, 13, 14, 15, 19, 27, 28, 33, 34, 35], "msgspec": [1, 10, 34], "struct": [1, 10, 34], "more": [1, 27], "pip": 1, "prior": 1, "2": [1, 27, 28, 30, 35, 36], "wa": [1, 16], "known": 1, "name": [1, 6, 12, 15, 16, 19, 27, 28, 29, 30, 31, 35], "under": [1, 30], "gain": 1, "quit": 1, "bit": 1, "popular": 1, "A": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 35], "main": [1, 6], "motiv": 1, "0": [1, 6, 27, 28, 30, 35, 36], "releas": 1, "than": [1, 22, 23, 30], "just": 1, "someth": 1, "also": [1, 27, 28, 31], "its": [1, 27, 29, 30], "core": 1, "architectur": 1, "As": [1, 27, 31, 34, 36], "would": 1, "longer": 1, "directli": [1, 30], "ti": 1, "chosen": [1, 27], "new": [1, 6, 27], "reflect": 1, "capabl": [1, 12], "It": 1, "odmant": [1, 11, 34], "beani": [1, 7, 34], "odm": [1, 27], "well": [1, 27], "minim": [1, 21, 23, 27], "from": [1, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 31, 32, 34, 35, 36], "import": [1, 27, 28, 29, 30, 31, 32, 35, 36], "dataclassfactori": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 27, 28, 29, 30, 31, 32, 34, 36], "class": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 23, 27, 28, 29, 30, 31, 32, 34, 35, 36], "person": [1, 27, 28, 30, 31, 32], "str": [1, 6, 12, 15, 16, 19, 24, 26, 27, 28, 30, 31, 32, 35, 36], "ag": [1, 27, 28, 30, 31, 36], "float": [1, 23, 26, 27, 28, 30, 31], "height": [1, 27, 28], "weight": [1, 27, 28], "personfactori": [1, 27, 28, 30, 31, 32], "__model__": [1, 5, 6, 12, 28], "def": [1, 27, 28, 29, 30, 31, 32, 35, 36], "test_is_person": [1, 28], "none": [1, 3, 5, 6, 7, 12, 13, 15, 16, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 35, 36], "person_inst": [1, 27, 28, 30, 31, 32], "assert": [1, 27, 28, 29, 30, 31, 32, 35, 36], "isinst": [1, 27, 28, 30, 31, 32, 35, 36], "That": [1, 28], "": [1, 5, 6, 8, 10, 12, 13, 14, 15, 16, 23, 27, 30, 32], "almost": [1, 23], "abl": 1, "creat": [1, 7, 12, 15, 16, 19, 28], "object": [1, 3, 6, 12, 15, 16, 19], "fit": 1, "definit": [1, 6, 27, 28], "becaus": [1, 7, 27, 31], "inform": 1, "avail": [1, 28, 35], "sourc": 1, "truth": 1, "pars": 1, "store": [1, 15, 16, 27], "dictionari": [1, 6, 10, 11, 12, 13, 15, 27, 30], "kwarg": [1, 4, 5, 6, 7, 12, 16, 18, 23, 27, 30, 31], "pass": [1, 5, 6, 7, 12, 16, 23, 30], "constructor": [1, 23], "map": [2, 6, 10, 11, 12, 13, 21, 30, 32, 35], "annot": [2, 5, 6, 12, 15, 36], "concret": [2, 28], "normal": [2, 15, 31], "python": [2, 23], "3": [2, 29, 35, 36], "9": 2, "post_gener": [3, 33], "descriptor": 3, "wrap": [3, 16, 27, 29, 31], "classmethod": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 27, 29, 30, 32], "postgener": [3, 6, 16, 27, 29], "field": [3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 20, 21, 28, 29, 33, 35, 36], "__init__": [3, 12, 13, 15, 16, 18, 19, 23, 32], "method": [3, 6, 7, 10, 11, 12, 13, 15, 16, 23, 27, 28, 30, 31, 32], "callabl": [3, 6, 10, 11, 12, 13, 16, 19, 21, 23, 24, 30, 31, 32, 35], "factoryexcept": 4, "factori": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 29, 31, 33, 35, 36], "error": [4, 6, 36], "configurationexcept": [4, 27], "configur": [4, 13, 28, 33], "misconfigur": 4, "parameterexcept": [4, 16], "paramet": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30], "wrong": 4, "missingbuildkwargexcept": [4, 30], "miss": 4, "missingdependencyexcept": 4, "importerror": 4, "attrsfactori": [5, 28, 34], "t": [5, 6, 7, 8, 10, 11, 12, 13, 16, 18, 21, 23, 24, 27, 28, 32, 35], "basefactori": [5, 6, 8, 10, 12, 13, 14, 19, 20, 21, 27, 34, 35, 36], "attr": [5, 28, 34], "attribut": [5, 6, 16, 27, 28, 29, 30, 35], "non": [5, 6, 30], "an": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 28, 30, 32, 34, 36], "except": [5, 6, 17, 27, 30], "rais": [5, 6, 16, 27, 30], "set": [5, 6, 12, 21, 35], "infer": [5, 6], "argument": [5, 6, 20, 21, 28], "__is_base_factory__": [5, 6, 7, 8, 10, 11, 12, 13, 14, 32, 35], "bool": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 21, 23, 24, 26, 36], "true": [5, 6, 7, 8, 10, 11, 12, 13, 14, 23, 27, 32, 35], "flag": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15], "dictat": [5, 6, 7, 8, 10, 11, 12, 13, 14, 23, 36], "whether": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 26], "regist": [5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 19, 31], "global": [5, 6, 7, 8, 10, 11, 12, 13, 14, 30], "handler": [5, 6, 7, 8, 10, 11, 12, 13, 14, 35], "typeddictfactori": [5, 6, 7, 8, 10, 11, 12, 13, 14, 28, 30, 34], "modelfactori": [5, 6, 7, 8, 10, 11, 12, 13, 14, 28, 34], "is_supported_typ": [5, 6, 7, 8, 10, 11, 12, 13, 14], "valu": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 26, 27, 30, 32, 36], "typeguard": [5, 6, 7, 8, 10, 11, 12, 13, 14], "determin": [5, 6, 7, 8, 10, 11, 12, 13, 14, 23], "given": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 23, 26, 30], "arbitrari": [5, 6, 7, 8, 10, 11, 12, 13, 14, 16], "return": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 32, 35], "get_model_field": [5, 6, 8, 10, 12, 13, 14], "list": [5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 21, 27, 28, 30, 31, 34, 35, 36], "field_meta": [5, 6, 7, 8, 10, 12, 13, 14, 17, 20, 21, 23], "fieldmeta": [5, 6, 7, 8, 10, 12, 13, 14, 15, 20, 21], "retriev": [5, 6, 8, 10, 12, 13, 14], "metadata": [5, 6, 8, 10, 12, 13, 14, 15, 35], "instanc": [5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 32, 36], "resolve_typ": 5, "resolv": [5, 35], "string": [5, 24, 26, 32], "forward": 5, "buildcontext": [6, 7, 12], "typeddict": [6, 14, 15, 16, 28, 30], "abc": [6, 34], "hold": 6, "logic": [6, 7, 27], "__check_model__": [6, 27], "fals": [6, 12, 13, 19, 21, 24, 26, 27, 35], "defin": [6, 28, 30, 36], "exist": [6, 7, 27, 28], "done": [6, 28], "against": 6, "ignor": [6, 16, 27, 36], "construct": 6, "onli": [6, 12, 27, 28, 30, 34], "__allow_none_optionals__": [6, 27], "classvar": [6, 13], "allow": [6, 10, 11, 12, 13, 16, 19, 30, 35], "randomli": [6, 27, 30], "__sync_persistence__": [6, 27, 35], "syncpersistenceprotocol": [6, 13, 18, 27], "sync": [6, 13, 18, 27, 30], "persist": [6, 7, 13, 17], "__async_persistence__": [6, 7, 27], "asyncpersistenceprotocol": [6, 7, 13, 18, 27], "async": [6, 7, 13, 18, 27], "__set_as_default_factory_for_type__": [6, 27], "default": [6, 12, 15, 30, 32, 35], "instead": [6, 30], "dynam": [6, 27, 28], "__base_factory_overrides__": 6, "overrid": [6, 10, 11, 12, 13, 28, 32], "replac": 6, "note": [6, 10, 11, 12, 13], "__faker__": [6, 27, 29], "faker": [6, 22], "proxi": 6, "user": [6, 27, 28], "__random__": [6, 27, 29, 30], "random": [6, 12, 15, 23, 24, 26, 30], "__random_seed__": [6, 27], "int": [6, 12, 15, 16, 21, 23, 24, 26, 27, 28, 30, 31, 35, 36], "integ": [6, 23, 26], "seed": [6, 30], "control": [6, 27, 30, 31], "__randomize_collection_length__": [6, 27, 35], "collect": [6, 12, 15, 21], "length": [6, 12, 15, 23, 24, 26, 36], "__min_collection_length__": [6, 27, 35, 36], "minimum": [6, 12, 15, 23, 24, 26, 36], "__max_collection_length__": [6, 27, 36], "5": [6, 27], "maximum": [6, 12, 15, 23, 24, 26, 36], "is_factory_typ": 6, "boolean": [6, 12, 15, 23, 26], "is_batch_factory_typ": 6, "sequenc": [6, 12, 15], "batch": [6, 16, 30, 31, 36], "extract_field_build_paramet": 6, "build_arg": 6, "extract": 6, "meta": [6, 12, 15, 20, 21], "abstract": [6, 30, 34], "seed_random": 6, "is_ignored_typ": 6, "meant": [6, 16, 28], "overwritten": 6, "extens": 6, "other": [6, 16, 27, 28, 30, 34, 35], "subclass": [6, 7, 12, 28], "get_provider_map": [6, 10, 11, 12, 13, 32], "distinct": [6, 10, 11, 12, 13], "create_factori": [6, 28, 35], "tupl": [6, 15, 23, 27], "f": 6, "current": [6, 28, 29, 36], "otherwis": [6, 7], "get_field_valu": [6, 7], "field_build_paramet": [6, 7], "build_context": [6, 7], "get_field_value_coverag": 6, "iter": 6, "should_set_none_valu": 6, "should_set_field_valu": [6, 12], "field_nam": [6, 12], "get_factory_field": 6, "try": 6, "smart": 6, "about": [6, 15, 27], "consid": [6, 13, 23], "dunder": [6, 27], "some": [6, 27, 28, 32], "parent": [6, 28], "made": [6, 12], "process_kwarg": 6, "_build_context": [6, 12], "process": [6, 27], "result": [6, 13, 16, 18, 20, 24, 26, 27, 30, 31], "process_kwargs_coverag": 6, "n": [6, 27], "coverag": [6, 20, 33], "full": [6, 35, 36], "sub": [6, 28, 36], "create_sync": [6, 27, 35], "synchron": [6, 13, 18, 27], "singl": [6, 7, 13, 18, 27], "create_batch_sync": [6, 27], "create_async": [6, 27, 35], "asynchron": [6, 13, 18, 27], "create_batch_async": [6, 27], "beaniepersistencehandl": 7, "save": [7, 13, 18, 27], "mongodb": 7, "save_mani": [7, 13, 18, 27], "multipl": [7, 13, 18, 23], "cannot": [7, 31, 32], "insert_mani": 7, "here": [7, 27, 35], "doesn": 7, "beaniedocumentfactori": [7, 34], "document": [7, 27, 34], "alia": [7, 12, 28], "base_factori": 9, "dataclass_factori": [9, 27, 36], "typed_dict_factori": 9, "pydantic_factori": [9, 28, 34], "msgspec_factori": 9, "odmantic_odm_factori": 9, "beanie_odm_factori": 9, "attrs_factori": [9, 28], "sqlalchemy_factori": [9, 35], "msgspecfactori": [10, 34], "odmanticmodelfactori": [11, 34], "pydanticconstraint": 12, "regard": [12, 15], "pydant": [12, 23, 24, 28, 34], "constraint": [12, 15, 22, 23, 26], "pydanticfieldmeta": 12, "handl": [12, 20, 23, 24, 33], "modelfield": 12, "ellipsi": 12, "children": [12, 15], "from_field_info": 12, "field_info": 12, "fieldinfo": 12, "use_alia": 12, "randomize_collection_length": [12, 15], "min_collection_length": [12, 15], "max_collection_length": [12, 15], "info": 12, "from_model_field": 12, "model_field": 12, "param": 12, "number": [12, 15, 21, 23, 36], "element": [12, 15], "get_constraints_metadata": [12, 15], "get": [12, 13, 15, 23, 28, 30], "factory_use_construct": 12, "valid": [12, 23, 28, 30], "instanti": 12, "is_custom_root_field": 12, "root": 12, "sqlasyncpersist": 13, "session": [13, 19, 35], "sqlafactori": 13, "sqlaasyncpersist": 13, "asyncsess": 13, "sqlalchemyfactori": [13, 34], "sqlalchemi": [13, 34, 35], "__set_primary_key__": 13, "primari": 13, "kei": [13, 35], "column": 13, "__set_foreign_keys__": 13, "foreign": [13, 35], "__set_relationships__": [13, 35], "relationship": [13, 35], "properti": [13, 15], "get_sqlalchemy_typ": 13, "typeddictt": 14, "null": 15, "sentinel": 15, "empti": 15, "urlconstraint": 15, "type_arg": 15, "arg": [15, 16, 18, 23, 30], "from_typ": 15, "builder": 15, "wrappedcal": 16, "ref": 16, "util": 16, "prevent": 16, "bind": 16, "mark": [16, 27], "time": [16, 30, 34], "p": 16, "invok": [16, 30], "whenev": 16, "fn": 16, "to_valu": 16, "output": [16, 23, 27, 36], "after": [16, 29], "design": [16, 30], "post": [16, 29, 30], "callback": [16, 23], "fixtur": [16, 19, 33], "pytest": [16, 19, 27, 30, 33], "call": [16, 19, 27, 30, 31], "constant": 17, "decor": [17, 19, 28, 31, 33], "pytest_plugin": [17, 31], "value_gener": [17, 20, 21, 22, 23, 24, 26], "protocol": [18, 23], "factoryfixtur": 19, "scope": [19, 30], "liter": [19, 36], "packag": [19, 34], "modul": [19, 34], "function": [19, 23, 27, 30, 36], "config": 19, "autous": 19, "__call__": [19, 23], "register_fixtur": [19, 31], "auto": 19, "handle_collection_typ": 20, "container_typ": 20, "recurs": [20, 36], "accept": [20, 21, 31], "handle_collection_type_coverag": 20, "unresolv": 20, "handle_constrained_collect": 21, "collection_typ": 21, "item_typ": 21, "max_item": 21, "min_item": 21, "unique_item": 21, "constrain": [21, 23, 24], "item": [21, 27], "maxim": [21, 23], "uniqu": 21, "handle_constrained_map": 21, "handle_constrained_d": 22, "ge": [22, 23], "date": [22, 27, 28, 30, 31], "gt": [22, 23], "le": [22, 23], "lt": [22, 23], "tz": 22, "tzinfo": 22, "datetim": [22, 27, 28, 29, 30, 31], "timezon": 22, "utc": 22, "fulfil": [22, 28], "expect": [22, 36], "less": [22, 23], "equal": [22, 23], "greater": [22, 23], "numbergeneratorprotocol": 23, "numer": 23, "signatur": [23, 30], "almost_equal_float": 23, "value_1": 23, "value_2": 23, "delta": [23, 30], "1e": 23, "08": 23, "two": 23, "problemat": 23, "comparison": 23, "is_multiply_of_multiple_of_in_rang": 23, "multiple_of": 23, "least": 23, "one": [23, 27, 28, 30], "multipli": 23, "li": 23, "rang": [23, 30], "between": [23, 27], "passes_pydantic_multiple_valid": 23, "anoth": [23, 36], "get_incr": 23, "t_type": [23, 24], "small": 23, "e": [23, 30, 34], "entri": 23, "get_value_or_non": 23, "equal_valu": 23, "get_constrained_number_rang": 23, "primit": [23, 25], "decim": [23, 26], "generate_constrained_numb": 23, "handle_constrained_int": 23, "handle_constrained_float": 23, "validate_max_digit": 23, "max_digit": 23, "decimal_plac": 23, "max": 23, "digit": 23, "place": [23, 27, 32], "handle_decimal_length": 23, "generated_decim": 23, "handle_constrained_decim": 23, "handle_constrained_string_or_byt": 24, "lower_cas": [24, 26], "upper_cas": [24, 26], "min_length": [24, 26], "max_length": [24, 26], "pattern": [24, 30], "byte": [24, 26], "constr": 24, "conbyt": 24, "lowercas": [24, 26], "uppercas": [24, 26], "regex": 24, "complex_typ": 25, "constrained_collect": 25, "constrained_d": 25, "constrained_numb": 25, "constrained_str": 25, "create_random_float": 26, "create_random_integ": 26, "create_random_decim": 26, "create_random_byt": 26, "create_random_str": 26, "create_random_boolean": 26, "special": [27, 32], "doubl": 27, "underscor": 27, "refer": [27, 32], "api": [27, 30], "below": [27, 28], "discuss": 27, "depth": [27, 36], "1": [27, 30, 35, 36], "cl": [27, 29, 30, 32], "choic": [27, 30], "john": 27, "alic": 27, "georg": 27, "test_random_se": 27, "outcom": 27, "determinist": 27, "been": 27, "produc": 27, "affect": [27, 30], "10": 27, "test_setting_random": 27, "ident": 27, "previou": 27, "differ": 27, "being": [27, 30], "actual": 27, "embed": 27, "insid": [27, 28], "complex": 27, "local": 27, "es_": 27, "test_setting_fak": 27, "spanish": 27, "alejandra": 27, "romeu": 27, "tolosa": 27, "abov": [27, 30, 31, 32, 34, 35, 36], "test": 27, "understand": [27, 30], "why": 27, "see": [27, 36], "have": [27, 36], "four": 27, "must": [27, 29, 31], "specifi": [27, 28], "asyncio": 27, "sleep": 27, "uuid": [27, 28, 30, 31, 32], "id": [27, 28, 30, 31, 32, 35], "mock_db": 27, "syncpersistencehandl": 27, "stuff": 27, "orm": [27, 35], "cach": 27, "redi": 27, "our": [27, 32], "case": [27, 28, 30, 32, 34, 36], "simpli": 27, "same": [27, 28, 36], "asyncpersistencehandl": 27, "await": 27, "0001": 27, "again": 27, "test_sync_persistence_build": 27, "test_sync_persistence_batch": 27, "person_batch": 27, "test_async_persistence_build": 27, "test_async_persistence_batch": 27, "With": 27, "now": [27, 29, 30], "respect": [27, 34], "explain": 27, "section": 27, "declar": [27, 30, 31, 33, 35], "intervent": 27, "onc": 27, "reus": 27, "petfactori": [27, 28, 30], "enum": [27, 28, 30], "union": [27, 28, 30, 31], "speci": [27, 28, 30], "cat": [27, 28, 30], "dog": [27, 28, 30], "pet": [27, 28, 30], "sound": [27, 28, 30], "hobbi": [27, 28, 30, 31], "birthdai": [27, 28, 30, 31], "asset": [27, 28, 30], "test_dynamic_factory_gener": [27, 28], "len": [27, 28, 30, 31, 32, 36], "roxi": [27, 30], "spammi": 27, "mosh": 27, "test_default_pet_factori": 27, "By": [27, 35], "owner": 27, "car": [27, 36], "ownerfactori": 27, "test_randomized_collection_length": 27, "alwai": 27, "treat": 27, "disabl": 27, "test_optional_type_ignor": 27, "don": [27, 28], "trigger": 27, "enabl": 27, "test_check_factory_field": 27, "match": 27, "unknown_field": 27, "part": 27, "lambda": [27, 30, 32], "foo": 27, "syntax": 28, "omit": 28, "sinc": 28, "13": 28, "export": [28, 30, 34], "Or": [28, 30, 35], "basemodel": 28, "3rd": [28, 32], "parti": [28, 32], "implement": 28, "long": 28, "stdlib": [28, 30], "interfac": 28, "alias": [28, 31], "variabl": 28, "date_of_birth": 28, "privat": 28, "_asset": 28, "test_person_factori": [28, 31], "neither": 28, "nor": 28, "although": 28, "primarili": 28, "expos": 28, "intern": 28, "test_imperative_factory_cr": 28, "pet_factori": 28, "pet_inst": [28, 30], "eventu": 28, "rabbit": 28, "mous": 28, "test_imperative_sub_factory_cr": 28, "cat_factori": 28, "cat_inst": 28, "usual": 29, "timedelta": [29, 30], "cast": 29, "datetimerang": [29, 30], "to_dt": [29, 30], "from_dt": [29, 30], "default_factori": [29, 30], "datetimerangefactori": [29, 30], "time_delta": 29, "3d": 29, "test_post_gener": [29, 30], "date_range_inst": [29, 30], "dai": [29, 30], "nonetheless": 30, "cover": 30, "look": 30, "few": 30, "hardcod": [30, 32], "woof": 30, "test_is_pet_inst": 30, "though": 30, "often": 30, "desir": 30, "restrict": [30, 31], "like": [30, 35], "ralph": 30, "test_pet_choic": 30, "mere": 30, "cleaner": 30, "simpler": 30, "fact": 30, "includ": [30, 34], "thu": 30, "write": 30, "so": [30, 32, 34, 35, 36], "easi": 30, "nice": 30, "access": [30, 31], "itself": [30, 31, 35], "intent": 30, "while": 30, "own": [30, 32], "attach": 30, "sever": 30, "wai": 30, "consist": 30, "rather": 30, "mean": 30, "complet": 30, "test_id_is_ignor": 30, "test_id_is_requir": 30, "alreadi": 30, "most": [30, 36], "best": 30, "avoid": 30, "helper": 30, "add_timedelta": 30, "cb": 30, "receiv": 30, "themselv": 30, "usag": [30, 35], "test_subfactori": 30, "person_instance_with_pet_nam": 30, "winston": 30, "register_fixture_decor": 31, "nick": 31, "person_factori": 31, "overcom": 31, "separ": 31, "without": 31, "person_factory_fixtur": 31, "still": 31, "another_person_inst": 31, "aliased_person_factori": 31, "classroom": 31, "teacher": 31, "pupil": 31, "classroomfactori": 31, "ludmilla": 31, "newman": 31, "20": 31, "test_fixture_field": 31, "classroom_inst": 31, "similar": 31, "propag": 31, "sometim": 32, "either": 32, "codebas": 32, "achiev": 32, "extend": [32, 34], "providers_map": 32, "code": 32, "customsecret": 32, "__repr__": 32, "__str__": 32, "secret": 32, "unknown": 32, "super": 32, "jeronimo": 32, "test_custom_secret_cr": 32, "repr": 32, "each": [32, 36], "appropri": 32, "great": 32, "localis": 32, "fashion": 32, "mani": 32, "lead": 32, "unnecessari": 32, "duplic": 32, "solut": 32, "typevar": 32, "customdataclassfactori": 32, "test_custom_dataclass_base_factori": 32, "These": 34, "addit": 34, "thei": 34, "namespac": 34, "ad": 34, "checkout": 34, "basic": 35, "declarativebas": 35, "mapped_column": 35, "author": 35, "__tablename__": 35, "primary_kei": 35, "authorfactori": 35, "test_sqla_factori": 35, "4": 35, "overridden": 35, "via": 35, "foreignkei": 35, "book": 35, "uselist": 35, "author_id": 35, "authorfactorywithrelationship": 35, "test_sqla_factory_without_relationship": 35, "yourself": 35, "sqla": 35, "__session__": 35, "create_engin": 35, "test_sqla_factory_persist": 35, "engin": 35, "sqlite": 35, "memori": 35, "create_al": 35, "customis": 35, "further": 35, "similarli": 35, "__async_session__": 35, "combin": 35, "up": 35, "back_popul": 35, "nullabl": 35, "test_custom_sqla_factori": 35, "_base_factori": 35, "remov": 35, "noqa": 35, "slf001": 35, "doc": 35, "altern": 36, "approach": 36, "attempt": 36, "form": 36, "take": 36, "__future__": 36, "boat": 36, "can_float": 36, "profil": 36, "favourite_color": 36, "red": 36, "green": 36, "blue": 36, "vehicl": 36, "profilefactori": 36, "test_profile_coverag": 36, "largest": 36, "varianc": 36, "notic": 36, "final": 36, "exhaust": 36, "particular": 36, "socialgroup": 36, "member": 36, "socialgroupfactori": 36, "test_social_group_coverag": 36, "group": 36, "caus": 36, "recursionerror": 36, "exceed": 36}, "objects": {"polyfactory": [[2, 0, 0, "-", "constants"], [3, 0, 0, "-", "decorators"], [4, 0, 0, "-", "exceptions"], [15, 0, 0, "-", "field_meta"], [16, 0, 0, "-", "fields"], [18, 0, 0, "-", "persistence"], [19, 0, 0, "-", "pytest_plugin"]], "polyfactory.decorators": [[3, 1, 1, "", "post_generated"]], "polyfactory.decorators.post_generated": [[3, 2, 1, "", "__init__"]], "polyfactory.exceptions": [[4, 3, 1, "", "ConfigurationException"], [4, 3, 1, "", "FactoryException"], [4, 3, 1, "", "MissingBuildKwargException"], [4, 3, 1, "", "MissingDependencyException"], [4, 3, 1, "", "ParameterException"]], "polyfactory.factories": [[5, 0, 0, "-", "attrs_factory"], [6, 0, 0, "-", "base"], [7, 0, 0, "-", "beanie_odm_factory"], [8, 0, 0, "-", "dataclass_factory"], [10, 0, 0, "-", "msgspec_factory"], [11, 0, 0, "-", "odmantic_odm_factory"], [12, 0, 0, "-", "pydantic_factory"], [13, 0, 0, "-", "sqlalchemy_factory"], [14, 0, 0, "-", "typed_dict_factory"]], "polyfactory.factories.attrs_factory": [[5, 1, 1, "", "AttrsFactory"]], "polyfactory.factories.attrs_factory.AttrsFactory": [[5, 4, 1, "", "__is_base_factory__"], [5, 4, 1, "", "__model__"], [5, 2, 1, "", "get_model_fields"], [5, 2, 1, "", "is_supported_type"], [5, 2, 1, "", "resolve_types"]], "polyfactory.factories.base": [[6, 1, 1, "", "BaseFactory"], [6, 1, 1, "", "BuildContext"]], "polyfactory.factories.base.BaseFactory": [[6, 4, 1, "", "__allow_none_optionals__"], [6, 4, 1, "", "__async_persistence__"], [6, 4, 1, "", "__base_factory_overrides__"], [6, 4, 1, "", "__check_model__"], [6, 4, 1, "", "__faker__"], [6, 4, 1, "", "__is_base_factory__"], [6, 4, 1, "", "__max_collection_length__"], [6, 4, 1, "", "__min_collection_length__"], [6, 4, 1, "", "__model__"], [6, 4, 1, "", "__random__"], [6, 4, 1, "", "__random_seed__"], [6, 4, 1, "", "__randomize_collection_length__"], [6, 4, 1, "", "__set_as_default_factory_for_type__"], [6, 4, 1, "", "__sync_persistence__"], [6, 2, 1, "", "batch"], [6, 2, 1, "", "build"], [6, 2, 1, "", "coverage"], [6, 2, 1, "", "create_async"], [6, 2, 1, "", "create_batch_async"], [6, 2, 1, "", "create_batch_sync"], [6, 2, 1, "", "create_factory"], [6, 2, 1, "", "create_sync"], [6, 2, 1, "", "extract_field_build_parameters"], [6, 2, 1, "", "get_factory_fields"], [6, 2, 1, "", "get_field_value"], [6, 2, 1, "", "get_field_value_coverage"], [6, 2, 1, "", "get_model_fields"], [6, 2, 1, "", "get_provider_map"], [6, 2, 1, "", "is_batch_factory_type"], [6, 2, 1, "", "is_factory_type"], [6, 2, 1, "", "is_ignored_type"], [6, 2, 1, "", "is_supported_type"], [6, 2, 1, "", "process_kwargs"], [6, 2, 1, "", "process_kwargs_coverage"], [6, 2, 1, "", "seed_random"], [6, 2, 1, "", "should_set_field_value"], [6, 2, 1, "", "should_set_none_value"]], "polyfactory.factories.beanie_odm_factory": [[7, 1, 1, "", "BeanieDocumentFactory"], [7, 1, 1, "", "BeaniePersistenceHandler"]], "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory": [[7, 4, 1, "", "__async_persistence__"], [7, 4, 1, "", "__is_base_factory__"], [7, 2, 1, "", "get_field_value"], [7, 2, 1, "", "is_supported_type"]], "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler": [[7, 2, 1, "", "save"], [7, 2, 1, "", "save_many"]], "polyfactory.factories.dataclass_factory": [[8, 1, 1, "", "DataclassFactory"]], "polyfactory.factories.dataclass_factory.DataclassFactory": [[8, 4, 1, "", "__is_base_factory__"], [8, 2, 1, "", "get_model_fields"], [8, 2, 1, "", "is_supported_type"]], "polyfactory.factories.msgspec_factory": [[10, 1, 1, "", "MsgspecFactory"]], "polyfactory.factories.msgspec_factory.MsgspecFactory": [[10, 4, 1, "", "__is_base_factory__"], [10, 2, 1, "", "get_model_fields"], [10, 2, 1, "", "get_provider_map"], [10, 2, 1, "", "is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[11, 1, 1, "", "OdmanticModelFactory"]], "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory": [[11, 4, 1, "", "__is_base_factory__"], [11, 2, 1, "", "get_provider_map"], [11, 2, 1, "", "is_supported_type"]], "polyfactory.factories.pydantic_factory": [[12, 1, 1, "", "ModelFactory"], [12, 1, 1, "", "PydanticConstraints"], [12, 1, 1, "", "PydanticFieldMeta"]], "polyfactory.factories.pydantic_factory.ModelFactory": [[12, 4, 1, "", "__is_base_factory__"], [12, 2, 1, "", "build"], [12, 2, 1, "", "get_model_fields"], [12, 2, 1, "", "get_provider_map"], [12, 2, 1, "", "is_custom_root_field"], [12, 2, 1, "", "is_supported_type"], [12, 2, 1, "", "should_set_field_value"]], "polyfactory.factories.pydantic_factory.PydanticFieldMeta": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "from_field_info"], [12, 2, 1, "", "from_model_field"], [12, 2, 1, "", "get_constraints_metadata"]], "polyfactory.factories.sqlalchemy_factory": [[13, 1, 1, "", "SQLAASyncPersistence"], [13, 1, 1, "", "SQLASyncPersistence"], [13, 1, 1, "", "SQLAlchemyFactory"]], "polyfactory.factories.sqlalchemy_factory.SQLAASyncPersistence": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "save"], [13, 2, 1, "", "save_many"]], "polyfactory.factories.sqlalchemy_factory.SQLASyncPersistence": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "save"], [13, 2, 1, "", "save_many"]], "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory": [[13, 4, 1, "", "__is_base_factory__"], [13, 4, 1, "", "__set_foreign_keys__"], [13, 4, 1, "", "__set_primary_key__"], [13, 4, 1, "", "__set_relationships__"], [13, 2, 1, "", "get_model_fields"], [13, 2, 1, "", "get_provider_map"], [13, 2, 1, "", "get_sqlalchemy_types"], [13, 2, 1, "", "is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[14, 1, 1, "", "TypedDictFactory"]], "polyfactory.factories.typed_dict_factory.TypedDictFactory": [[14, 4, 1, "", "__is_base_factory__"], [14, 2, 1, "", "get_model_fields"], [14, 2, 1, "", "is_supported_type"]], "polyfactory.field_meta": [[15, 1, 1, "", "Constraints"], [15, 1, 1, "", "FieldMeta"], [15, 1, 1, "", "Null"], [15, 1, 1, "", "UrlConstraints"]], "polyfactory.field_meta.FieldMeta": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "from_type"], [15, 2, 1, "", "get_constraints_metadata"], [15, 5, 1, "", "type_args"]], "polyfactory.fields": [[16, 1, 1, "", "Fixture"], [16, 1, 1, "", "Ignore"], [16, 1, 1, "", "PostGenerated"], [16, 1, 1, "", "Require"], [16, 1, 1, "", "Use"], [16, 1, 1, "", "WrappedCallable"]], "polyfactory.fields.Fixture": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "to_value"]], "polyfactory.fields.PostGenerated": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "to_value"]], "polyfactory.fields.Use": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "to_value"]], "polyfactory.persistence": [[18, 1, 1, "", "AsyncPersistenceProtocol"], [18, 1, 1, "", "SyncPersistenceProtocol"]], "polyfactory.persistence.AsyncPersistenceProtocol": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "save"], [18, 2, 1, "", "save_many"]], "polyfactory.persistence.SyncPersistenceProtocol": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "save"], [18, 2, 1, "", "save_many"]], "polyfactory.pytest_plugin": [[19, 1, 1, "", "FactoryFixture"], [19, 6, 1, "", "register_fixture"]], "polyfactory.pytest_plugin.FactoryFixture": [[19, 2, 1, "", "__call__"], [19, 2, 1, "", "__init__"]], "polyfactory.value_generators": [[20, 0, 0, "-", "complex_types"], [21, 0, 0, "-", "constrained_collections"], [22, 0, 0, "-", "constrained_dates"], [23, 0, 0, "-", "constrained_numbers"], [24, 0, 0, "-", "constrained_strings"], [26, 0, 0, "-", "primitives"]], "polyfactory.value_generators.complex_types": [[20, 6, 1, "", "handle_collection_type"], [20, 6, 1, "", "handle_collection_type_coverage"]], "polyfactory.value_generators.constrained_collections": [[21, 6, 1, "", "handle_constrained_collection"], [21, 6, 1, "", "handle_constrained_mapping"]], "polyfactory.value_generators.constrained_dates": [[22, 6, 1, "", "handle_constrained_date"]], "polyfactory.value_generators.constrained_numbers": [[23, 1, 1, "", "NumberGeneratorProtocol"], [23, 6, 1, "", "almost_equal_floats"], [23, 6, 1, "", "generate_constrained_number"], [23, 6, 1, "", "get_constrained_number_range"], [23, 6, 1, "", "get_increment"], [23, 6, 1, "", "get_value_or_none"], [23, 6, 1, "", "handle_constrained_decimal"], [23, 6, 1, "", "handle_constrained_float"], [23, 6, 1, "", "handle_constrained_int"], [23, 6, 1, "", "handle_decimal_length"], [23, 6, 1, "", "is_multiply_of_multiple_of_in_range"], [23, 6, 1, "", "passes_pydantic_multiple_validator"], [23, 6, 1, "", "validate_max_digits"]], "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol": [[23, 2, 1, "", "__call__"], [23, 2, 1, "", "__init__"]], "polyfactory.value_generators.constrained_strings": [[24, 6, 1, "", "handle_constrained_string_or_bytes"]], "polyfactory.value_generators.primitives": [[26, 6, 1, "", "create_random_boolean"], [26, 6, 1, "", "create_random_bytes"], [26, 6, 1, "", "create_random_decimal"], [26, 6, 1, "", "create_random_float"], [26, 6, 1, "", "create_random_integer"], [26, 6, 1, "", "create_random_string"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:attribute", "5": "py:property", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "set": [0, 27], "up": 0, "environ": 0, "code": 0, "workflow": 0, "project": 0, "document": 0, "doc": 0, "theme": 0, "appear": 0, "run": 0, "local": 0, "write": 0, "edit": 0, "creat": [0, 32], "new": 0, "releas": 0, "polyfactori": [1, 34], "instal": 1, "relat": 1, "pydant": 1, "factori": [1, 9, 27, 28, 30, 32, 34], "exampl": 1, "constant": 2, "decor": [3, 29], "except": 4, "attrs_factori": 5, "base_factori": 6, "beanie_odm_factori": 7, "dataclass_factori": 8, "msgspec_factori": 10, "odmantic_odm_factori": 11, "pydantic_factori": 12, "sqlalchemy_factori": 13, "typed_dict_factori": 14, "field_meta": 15, "field": [16, 27, 30, 31], "api": [17, 35], "refer": [17, 35], "persist": [18, 27, 35], "pytest_plugin": 19, "complex_typ": 20, "constrained_collect": 21, "constrained_d": 22, "constrained_numb": 23, "constrained_str": 24, "value_gener": 25, "primit": 26, "configur": [27, 35], "seed": 27, "random": 27, "faker": 27, "handler": 27, "defin": 27, "default": 27, "collect": [27, 36], "length": 27, "allow": 27, "none": 27, "option": 27, "check": 27, "declar": 28, "imper": 28, "creation": 28, "The": [29, 30, 31], "post_gener": 29, "us": 30, "ignor": 30, "requir": 30, "postgener": 30, "pytest": 31, "fixtur": 31, "handl": 32, "custom": 32, "type": [32, 36], "base": 32, "usag": 33, "guid": 33, "sqlalchemyfactori": 35, "ad": 35, "global": 35, "overrid": 35, "model": 36, "coverag": 36, "gener": 36, "note": 36, "known": 36, "limit": 36}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"The post_generated decorator": [[29, "the-post-generated-decorator"]], "Pytest fixtures": [[31, "pytest-fixtures"]], "The Fixture Field": [[31, "the-fixture-field"]], "SQLAlchemyFactory": [[35, "sqlalchemyfactory"]], "Configuration": [[35, "configuration"]], "Persistence": [[35, "persistence"]], "Adding global overrides": [[35, "adding-global-overrides"]], "API reference": [[35, "api-reference"]], "Factory Fields": [[30, "factory-fields"]], "The Use Field": [[30, "the-use-field"]], "The Ignore Field": [[30, "the-ignore-field"]], "The Require Field": [[30, "the-require-field"]], "The PostGenerated Field": [[30, "the-postgenerated-field"]], "Factories as Fields": [[30, "factories-as-fields"]], "Polyfactory Factories": [[34, "polyfactory-factories"]], "Factory Configuration": [[27, "factory-configuration"]], "Seeding Randomness": [[27, "seeding-randomness"]], "Setting Random": [[27, "setting-random"]], "Setting Faker": [[27, "setting-faker"]], "Persistence Handlers": [[27, "persistence-handlers"]], "Defining Default Factories": [[27, "defining-default-factories"]], "Randomized Collection Length": [[27, "randomized-collection-length"]], "Allow None Optionals": [[27, "allow-none-optionals"]], "Check Factory Fields": [[27, "check-factory-fields"]], "Handling Custom Types": [[32, "handling-custom-types"]], "Creating Custom Base Factories": [[32, "creating-custom-base-factories"]], "Usage Guide": [[33, "usage-guide"]], "Declaring Factories": [[28, "declaring-factories"]], "Imperative Factory Creation": [[28, "imperative-factory-creation"]], "Model coverage generation": [[36, "model-coverage-generation"]], "Notes on collection types": [[36, "notes-on-collection-types"]], "Known Limitations": [[36, "known-limitations"]], "pytest_plugin": [[19, "module-polyfactory.pytest_plugin"]], "constrained_numbers": [[23, "module-polyfactory.value_generators.constrained_numbers"]], "value_generators": [[25, "value-generators"]], "complex_types": [[20, "module-polyfactory.value_generators.complex_types"]], "persistence": [[18, "module-polyfactory.persistence"]], "constrained_collections": [[21, "module-polyfactory.value_generators.constrained_collections"]], "constrained_strings": [[24, "module-polyfactory.value_generators.constrained_strings"]], "primitives": [[26, "module-polyfactory.value_generators.primitives"]], "constrained_dates": [[22, "module-polyfactory.value_generators.constrained_dates"]], "dataclass_factory": [[8, "module-polyfactory.factories.dataclass_factory"]], "beanie_odm_factory": [[7, "module-polyfactory.factories.beanie_odm_factory"]], "decorators": [[3, "module-polyfactory.decorators"]], "Contributing": [[0, "contributing"]], "Setting up the environment": [[0, "setting-up-the-environment"]], "Code contributions": [[0, "code-contributions"]], "Workflow": [[0, "workflow"]], "Project documentation": [[0, "project-documentation"]], "Docs theme and appearance": [[0, "docs-theme-and-appearance"]], "Running the docs locally": [[0, "running-the-docs-locally"]], "Writing and editing docs": [[0, "writing-and-editing-docs"]], "Creating a new release": [[0, "creating-a-new-release"]], "base_factory": [[6, "module-polyfactory.factories.base"]], "attrs_factory": [[5, "module-polyfactory.factories.attrs_factory"]], "exceptions": [[4, "module-polyfactory.exceptions"]], "Polyfactory": [[1, "polyfactory"]], "Installation": [[1, "installation"]], "Relation to Pydantic-Factories": [[1, "relation-to-pydantic-factories"]], "Example": [[1, "example"]], "constants": [[2, "constants"]], "sqlalchemy_factory": [[13, "module-polyfactory.factories.sqlalchemy_factory"]], "fields": [[16, "module-polyfactory.fields"]], "typed_dict_factory": [[14, "module-polyfactory.factories.typed_dict_factory"]], "pydantic_factory": [[12, "module-polyfactory.factories.pydantic_factory"]], "field_meta": [[15, "module-polyfactory.field_meta"]], "factories": [[9, "factories"]], "API Reference": [[17, "api-reference"]], "odmantic_odm_factory": [[11, "module-polyfactory.factories.odmantic_odm_factory"]], "msgspec_factory": [[10, "module-polyfactory.factories.msgspec_factory"]]}, "indexentries": {"module": [[2, "module-polyfactory.constants"], [3, "module-polyfactory.decorators"], [4, "module-polyfactory.exceptions"], [5, "module-polyfactory.factories.attrs_factory"], [6, "module-polyfactory.factories.base"], [7, "module-polyfactory.factories.beanie_odm_factory"], [8, "module-polyfactory.factories.dataclass_factory"], [10, "module-polyfactory.factories.msgspec_factory"], [11, "module-polyfactory.factories.odmantic_odm_factory"], [12, "module-polyfactory.factories.pydantic_factory"], [13, "module-polyfactory.factories.sqlalchemy_factory"], [14, "module-polyfactory.factories.typed_dict_factory"], [15, "module-polyfactory.field_meta"], [16, "module-polyfactory.fields"], [18, "module-polyfactory.persistence"], [19, "module-polyfactory.pytest_plugin"], [20, "module-polyfactory.value_generators.complex_types"], [21, "module-polyfactory.value_generators.constrained_collections"], [22, "module-polyfactory.value_generators.constrained_dates"], [23, "module-polyfactory.value_generators.constrained_numbers"], [24, "module-polyfactory.value_generators.constrained_strings"], [26, "module-polyfactory.value_generators.primitives"]], "polyfactory.constants": [[2, "module-polyfactory.constants"]], "__init__() (polyfactory.decorators.post_generated method)": [[3, "polyfactory.decorators.post_generated.__init__"]], "polyfactory.decorators": [[3, "module-polyfactory.decorators"]], "post_generated (class in polyfactory.decorators)": [[3, "polyfactory.decorators.post_generated"]], "configurationexception": [[4, "polyfactory.exceptions.ConfigurationException"]], "factoryexception": [[4, "polyfactory.exceptions.FactoryException"]], "missingbuildkwargexception": [[4, "polyfactory.exceptions.MissingBuildKwargException"]], "missingdependencyexception": [[4, "polyfactory.exceptions.MissingDependencyException"]], "parameterexception": [[4, "polyfactory.exceptions.ParameterException"]], "polyfactory.exceptions": [[4, "module-polyfactory.exceptions"]], "attrsfactory (class in polyfactory.factories.attrs_factory)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory"]], "__is_base_factory__ (polyfactory.factories.attrs_factory.attrsfactory attribute)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.__is_base_factory__"]], "__model__ (polyfactory.factories.attrs_factory.attrsfactory attribute)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.__model__"]], "get_model_fields() (polyfactory.factories.attrs_factory.attrsfactory class method)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.attrs_factory.attrsfactory class method)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.is_supported_type"]], "polyfactory.factories.attrs_factory": [[5, "module-polyfactory.factories.attrs_factory"]], "resolve_types() (polyfactory.factories.attrs_factory.attrsfactory class method)": [[5, "polyfactory.factories.attrs_factory.AttrsFactory.resolve_types"]], "basefactory (class in polyfactory.factories.base)": [[6, "polyfactory.factories.base.BaseFactory"]], "buildcontext (class in polyfactory.factories.base)": [[6, "polyfactory.factories.base.BuildContext"]], "__allow_none_optionals__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__allow_none_optionals__"]], "__async_persistence__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__async_persistence__"]], "__base_factory_overrides__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__base_factory_overrides__"]], "__check_model__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__check_model__"]], "__faker__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__faker__"]], "__is_base_factory__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__is_base_factory__"]], "__max_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__max_collection_length__"]], "__min_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__min_collection_length__"]], "__model__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__model__"]], "__random__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__random__"]], "__random_seed__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__random_seed__"]], "__randomize_collection_length__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__randomize_collection_length__"]], "__set_as_default_factory_for_type__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__set_as_default_factory_for_type__"]], "__sync_persistence__ (polyfactory.factories.base.basefactory attribute)": [[6, "polyfactory.factories.base.BaseFactory.__sync_persistence__"]], "batch() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.batch"]], "build() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.build"]], "coverage() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.coverage"]], "create_async() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_async"]], "create_batch_async() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_batch_async"]], "create_batch_sync() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_batch_sync"]], "create_factory() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_factory"]], "create_sync() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.create_sync"]], "extract_field_build_parameters() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.extract_field_build_parameters"]], "get_factory_fields() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_factory_fields"]], "get_field_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_field_value"]], "get_field_value_coverage() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_field_value_coverage"]], "get_model_fields() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.get_provider_map"]], "is_batch_factory_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_batch_factory_type"]], "is_factory_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_factory_type"]], "is_ignored_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_ignored_type"]], "is_supported_type() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.is_supported_type"]], "polyfactory.factories.base": [[6, "module-polyfactory.factories.base"]], "process_kwargs() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.process_kwargs"]], "process_kwargs_coverage() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.process_kwargs_coverage"]], "seed_random() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.seed_random"]], "should_set_field_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.should_set_field_value"]], "should_set_none_value() (polyfactory.factories.base.basefactory class method)": [[6, "polyfactory.factories.base.BaseFactory.should_set_none_value"]], "beaniedocumentfactory (class in polyfactory.factories.beanie_odm_factory)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory"]], "beaniepersistencehandler (class in polyfactory.factories.beanie_odm_factory)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler"]], "__async_persistence__ (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory attribute)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.__async_persistence__"]], "__is_base_factory__ (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory attribute)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.__is_base_factory__"]], "get_field_value() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.get_field_value"]], "is_supported_type() (polyfactory.factories.beanie_odm_factory.beaniedocumentfactory class method)": [[7, "polyfactory.factories.beanie_odm_factory.BeanieDocumentFactory.is_supported_type"]], "polyfactory.factories.beanie_odm_factory": [[7, "module-polyfactory.factories.beanie_odm_factory"]], "save() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save"]], "save_many() (polyfactory.factories.beanie_odm_factory.beaniepersistencehandler method)": [[7, "polyfactory.factories.beanie_odm_factory.BeaniePersistenceHandler.save_many"]], "dataclassfactory (class in polyfactory.factories.dataclass_factory)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory"]], "__is_base_factory__ (polyfactory.factories.dataclass_factory.dataclassfactory attribute)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.dataclass_factory.dataclassfactory class method)": [[8, "polyfactory.factories.dataclass_factory.DataclassFactory.is_supported_type"]], "polyfactory.factories.dataclass_factory": [[8, "module-polyfactory.factories.dataclass_factory"]], "msgspecfactory (class in polyfactory.factories.msgspec_factory)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory"]], "__is_base_factory__ (polyfactory.factories.msgspec_factory.msgspecfactory attribute)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.msgspec_factory.msgspecfactory class method)": [[10, "polyfactory.factories.msgspec_factory.MsgspecFactory.is_supported_type"]], "polyfactory.factories.msgspec_factory": [[10, "module-polyfactory.factories.msgspec_factory"]], "odmanticmodelfactory (class in polyfactory.factories.odmantic_odm_factory)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory"]], "__is_base_factory__ (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory attribute)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.__is_base_factory__"]], "get_provider_map() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.get_provider_map"]], "is_supported_type() (polyfactory.factories.odmantic_odm_factory.odmanticmodelfactory class method)": [[11, "polyfactory.factories.odmantic_odm_factory.OdmanticModelFactory.is_supported_type"]], "polyfactory.factories.odmantic_odm_factory": [[11, "module-polyfactory.factories.odmantic_odm_factory"]], "modelfactory (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory"]], "pydanticconstraints (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.PydanticConstraints"]], "pydanticfieldmeta (class in polyfactory.factories.pydantic_factory)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta"]], "__init__() (polyfactory.factories.pydantic_factory.pydanticfieldmeta method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.__init__"]], "__is_base_factory__ (polyfactory.factories.pydantic_factory.modelfactory attribute)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.__is_base_factory__"]], "build() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.build"]], "from_field_info() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_field_info"]], "from_model_field() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.from_model_field"]], "get_constraints_metadata() (polyfactory.factories.pydantic_factory.pydanticfieldmeta class method)": [[12, "polyfactory.factories.pydantic_factory.PydanticFieldMeta.get_constraints_metadata"]], "get_model_fields() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.get_provider_map"]], "is_custom_root_field() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.is_custom_root_field"]], "is_supported_type() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.is_supported_type"]], "polyfactory.factories.pydantic_factory": [[12, "module-polyfactory.factories.pydantic_factory"]], "should_set_field_value() (polyfactory.factories.pydantic_factory.modelfactory class method)": [[12, "polyfactory.factories.pydantic_factory.ModelFactory.should_set_field_value"]], "sqlaasyncpersistence (class in polyfactory.factories.sqlalchemy_factory)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAASyncPersistence"]], "sqlasyncpersistence (class in polyfactory.factories.sqlalchemy_factory)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLASyncPersistence"]], "sqlalchemyfactory (class in polyfactory.factories.sqlalchemy_factory)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory"]], "__init__() (polyfactory.factories.sqlalchemy_factory.sqlaasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAASyncPersistence.__init__"]], "__init__() (polyfactory.factories.sqlalchemy_factory.sqlasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLASyncPersistence.__init__"]], "__is_base_factory__ (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory attribute)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.__is_base_factory__"]], "__set_foreign_keys__ (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory attribute)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.__set_foreign_keys__"]], "__set_primary_key__ (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory attribute)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.__set_primary_key__"]], "__set_relationships__ (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory attribute)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.__set_relationships__"]], "get_model_fields() (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory class method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.get_model_fields"]], "get_provider_map() (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory class method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.get_provider_map"]], "get_sqlalchemy_types() (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory class method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.get_sqlalchemy_types"]], "is_supported_type() (polyfactory.factories.sqlalchemy_factory.sqlalchemyfactory class method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAlchemyFactory.is_supported_type"]], "polyfactory.factories.sqlalchemy_factory": [[13, "module-polyfactory.factories.sqlalchemy_factory"]], "save() (polyfactory.factories.sqlalchemy_factory.sqlaasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAASyncPersistence.save"]], "save() (polyfactory.factories.sqlalchemy_factory.sqlasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLASyncPersistence.save"]], "save_many() (polyfactory.factories.sqlalchemy_factory.sqlaasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLAASyncPersistence.save_many"]], "save_many() (polyfactory.factories.sqlalchemy_factory.sqlasyncpersistence method)": [[13, "polyfactory.factories.sqlalchemy_factory.SQLASyncPersistence.save_many"]], "typeddictfactory (class in polyfactory.factories.typed_dict_factory)": [[14, "polyfactory.factories.typed_dict_factory.TypedDictFactory"]], "__is_base_factory__ (polyfactory.factories.typed_dict_factory.typeddictfactory attribute)": [[14, "polyfactory.factories.typed_dict_factory.TypedDictFactory.__is_base_factory__"]], "get_model_fields() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[14, "polyfactory.factories.typed_dict_factory.TypedDictFactory.get_model_fields"]], "is_supported_type() (polyfactory.factories.typed_dict_factory.typeddictfactory class method)": [[14, "polyfactory.factories.typed_dict_factory.TypedDictFactory.is_supported_type"]], "polyfactory.factories.typed_dict_factory": [[14, "module-polyfactory.factories.typed_dict_factory"]], "constraints (class in polyfactory.field_meta)": [[15, "polyfactory.field_meta.Constraints"]], "fieldmeta (class in polyfactory.field_meta)": [[15, "polyfactory.field_meta.FieldMeta"]], "null (class in polyfactory.field_meta)": [[15, "polyfactory.field_meta.Null"]], "urlconstraints (class in polyfactory.field_meta)": [[15, "polyfactory.field_meta.UrlConstraints"]], "__init__() (polyfactory.field_meta.fieldmeta method)": [[15, "polyfactory.field_meta.FieldMeta.__init__"]], "from_type() (polyfactory.field_meta.fieldmeta class method)": [[15, "polyfactory.field_meta.FieldMeta.from_type"]], "get_constraints_metadata() (polyfactory.field_meta.fieldmeta class method)": [[15, "polyfactory.field_meta.FieldMeta.get_constraints_metadata"]], "polyfactory.field_meta": [[15, "module-polyfactory.field_meta"]], "type_args (polyfactory.field_meta.fieldmeta property)": [[15, "polyfactory.field_meta.FieldMeta.type_args"]], "fixture (class in polyfactory.fields)": [[16, "polyfactory.fields.Fixture"]], "ignore (class in polyfactory.fields)": [[16, "polyfactory.fields.Ignore"]], "postgenerated (class in polyfactory.fields)": [[16, "polyfactory.fields.PostGenerated"]], "require (class in polyfactory.fields)": [[16, "polyfactory.fields.Require"]], "use (class in polyfactory.fields)": [[16, "polyfactory.fields.Use"]], "wrappedcallable (class in polyfactory.fields)": [[16, "polyfactory.fields.WrappedCallable"]], "__init__() (polyfactory.fields.fixture method)": [[16, "polyfactory.fields.Fixture.__init__"]], "__init__() (polyfactory.fields.postgenerated method)": [[16, "polyfactory.fields.PostGenerated.__init__"]], "__init__() (polyfactory.fields.use method)": [[16, "polyfactory.fields.Use.__init__"]], "polyfactory.fields": [[16, "module-polyfactory.fields"]], "to_value() (polyfactory.fields.fixture method)": [[16, "polyfactory.fields.Fixture.to_value"]], "to_value() (polyfactory.fields.postgenerated method)": [[16, "polyfactory.fields.PostGenerated.to_value"]], "to_value() (polyfactory.fields.use method)": [[16, "polyfactory.fields.Use.to_value"]], "asyncpersistenceprotocol (class in polyfactory.persistence)": [[18, "polyfactory.persistence.AsyncPersistenceProtocol"]], "syncpersistenceprotocol (class in polyfactory.persistence)": [[18, "polyfactory.persistence.SyncPersistenceProtocol"]], "__init__() (polyfactory.persistence.asyncpersistenceprotocol method)": [[18, "polyfactory.persistence.AsyncPersistenceProtocol.__init__"]], "__init__() (polyfactory.persistence.syncpersistenceprotocol method)": [[18, "polyfactory.persistence.SyncPersistenceProtocol.__init__"]], "polyfactory.persistence": [[18, "module-polyfactory.persistence"]], "save() (polyfactory.persistence.asyncpersistenceprotocol method)": [[18, "polyfactory.persistence.AsyncPersistenceProtocol.save"]], "save() (polyfactory.persistence.syncpersistenceprotocol method)": [[18, "polyfactory.persistence.SyncPersistenceProtocol.save"]], "save_many() (polyfactory.persistence.asyncpersistenceprotocol method)": [[18, "polyfactory.persistence.AsyncPersistenceProtocol.save_many"]], "save_many() (polyfactory.persistence.syncpersistenceprotocol method)": [[18, "polyfactory.persistence.SyncPersistenceProtocol.save_many"]], "factoryfixture (class in polyfactory.pytest_plugin)": [[19, "polyfactory.pytest_plugin.FactoryFixture"]], "__call__() (polyfactory.pytest_plugin.factoryfixture method)": [[19, "polyfactory.pytest_plugin.FactoryFixture.__call__"]], "__init__() (polyfactory.pytest_plugin.factoryfixture method)": [[19, "polyfactory.pytest_plugin.FactoryFixture.__init__"]], "polyfactory.pytest_plugin": [[19, "module-polyfactory.pytest_plugin"]], "register_fixture() (in module polyfactory.pytest_plugin)": [[19, "polyfactory.pytest_plugin.register_fixture"]], "handle_collection_type() (in module polyfactory.value_generators.complex_types)": [[20, "polyfactory.value_generators.complex_types.handle_collection_type"]], "handle_collection_type_coverage() (in module polyfactory.value_generators.complex_types)": [[20, "polyfactory.value_generators.complex_types.handle_collection_type_coverage"]], "polyfactory.value_generators.complex_types": [[20, "module-polyfactory.value_generators.complex_types"]], "handle_constrained_collection() (in module polyfactory.value_generators.constrained_collections)": [[21, "polyfactory.value_generators.constrained_collections.handle_constrained_collection"]], "handle_constrained_mapping() (in module polyfactory.value_generators.constrained_collections)": [[21, "polyfactory.value_generators.constrained_collections.handle_constrained_mapping"]], "polyfactory.value_generators.constrained_collections": [[21, "module-polyfactory.value_generators.constrained_collections"]], "handle_constrained_date() (in module polyfactory.value_generators.constrained_dates)": [[22, "polyfactory.value_generators.constrained_dates.handle_constrained_date"]], "polyfactory.value_generators.constrained_dates": [[22, "module-polyfactory.value_generators.constrained_dates"]], "numbergeneratorprotocol (class in polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol"]], "__call__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[23, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__call__"]], "__init__() (polyfactory.value_generators.constrained_numbers.numbergeneratorprotocol method)": [[23, "polyfactory.value_generators.constrained_numbers.NumberGeneratorProtocol.__init__"]], "almost_equal_floats() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.almost_equal_floats"]], "generate_constrained_number() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.generate_constrained_number"]], "get_constrained_number_range() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.get_constrained_number_range"]], "get_increment() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.get_increment"]], "get_value_or_none() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.get_value_or_none"]], "handle_constrained_decimal() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.handle_constrained_decimal"]], "handle_constrained_float() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.handle_constrained_float"]], "handle_constrained_int() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.handle_constrained_int"]], "handle_decimal_length() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.handle_decimal_length"]], "is_multiply_of_multiple_of_in_range() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.is_multiply_of_multiple_of_in_range"]], "passes_pydantic_multiple_validator() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.passes_pydantic_multiple_validator"]], "polyfactory.value_generators.constrained_numbers": [[23, "module-polyfactory.value_generators.constrained_numbers"]], "validate_max_digits() (in module polyfactory.value_generators.constrained_numbers)": [[23, "polyfactory.value_generators.constrained_numbers.validate_max_digits"]], "handle_constrained_string_or_bytes() (in module polyfactory.value_generators.constrained_strings)": [[24, "polyfactory.value_generators.constrained_strings.handle_constrained_string_or_bytes"]], "polyfactory.value_generators.constrained_strings": [[24, "module-polyfactory.value_generators.constrained_strings"]], "create_random_boolean() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_boolean"]], "create_random_bytes() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_bytes"]], "create_random_decimal() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_decimal"]], "create_random_float() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_float"]], "create_random_integer() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_integer"]], "create_random_string() (in module polyfactory.value_generators.primitives)": [[26, "polyfactory.value_generators.primitives.create_random_string"]], "polyfactory.value_generators.primitives": [[26, "module-polyfactory.value_generators.primitives"]]}})